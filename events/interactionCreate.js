const Discord = require('discord.js')
const { ButtonBuilder,EmbedBuilder,ActionRowBuilder,ChannelType,ButtonStyle,PermissionsBitField} = require('discord.js')
let awaited = require('../awaited.json')
const fs = require('fs')

module.exports = async(client, interaction) => {
    if (interaction.isButton()) {
            
            fs.readFile('./awaited.json', "utf-8",async function(err, jsonString) {
                if(interaction.customId === 'like') {
                    let choose = interaction.message.embeds[0].image.url
                    try {
                    await interaction.channel.messages.fetch(interaction.message.id).then(async({id}) => {
                    console.log(id)
                if(err) {
                    return console.log(err)
                }
                let data = JSON.parse(jsonString)  // –ø—Ä–æ–±—É–≤–∞–≤ —á–µ–∫–∞–π –Ω–µ –±—É–¥–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏, –Ω–∞–≤—ñ—Ç—å –ø—Ä–æ–±—É–≤–∞—Ç–∏ –Ω–µ –≤–∞—Ä—Ç–æ —Ç–µ–∂ –Ω–µ –±—É–¥–µ, –ø—Ä–æ–±—É–≤–∞–≤
            let user = client.users.cache.get(data[id].userid) //—Ç–∞ —Ü–µ —Ç—É—Ç –ø—Ä–∏ —á–º–æ—É, awaited[(id)] undefined, —Ç—É—Ç –Ω—ñ—Ö—É—è –Ω–µ –±—É–¥–µ —á–µ–ª
            const embed = new Discord.EmbedBuilder()
            .setTitle(`${data[id].title}`)
            .setImage(choose)
            .setFooter({text:`–ú–µ–º —Å—Ç–≤–æ—Ä–∏–≤ ${user.username}`, iconURL:`${user.displayAvatarURL({dynamic:true})}`})
            if(data[id].description) {embed.setDescription(`${data[id].description}`)}
            const channel = client.channels.cache.get('1073323350170017793')
            await channel.send({embeds:[embed]}).then(async(msg) => {
                await msg.react('üëç')
                await msg.react('üëé')
            })
            await interaction.message.delete()
            await user.send('–†–æ–∑—Ä–æ–±–Ω–∏–∫ –ø—Ä–∏–π–Ω—è–≤ —Ç–≤—ñ–π –º–µ–º. –ô–æ–≥–æ –±—É–ª–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä Ukrainian Bot')
       
        })
            } catch(e) {
                console.log(e)
            }
        
        } else if(interaction.customId === 'dislike') {
            let choose = interaction.message.embeds[0].image.url
            try{
            let user = client.users.cache.get(data[interaction.channel.messages.fetch(interaction.message.id).id].userid)
            await user.send('–ù–∞–∂–∞–ª—å, —Ç–≤—ñ–π –º–µ–º –±—É–ª–æ –Ω–µ –ø—Ä–∏–π–Ω—è—Ç–æ. –†–æ–∑—Ä–æ–±–Ω–∏–∫ –≤—ñ–¥—Ö–∏–ª–∏–≤ –π–æ–≥–æ.')
            } catch(e) {
                console.log(e)
            }
        }
        if(interaction.customId === 'tic')  {
        
            if(interaction.guild.channels.cache.find(channel => channel.name === `–±—ñ–ª–µ—Ç-–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞-${interaction.user.id}`) !== undefined){
                interaction.reply({content:`–í —Ç–µ–±–µ –≤–∂–µ —î –Ω–µ –∑–∞–∫—Ä–∏—Ç–∏–π –±—ñ–ª–µ—Ç!`,ephemeral:true})
                return;
            }
            let button1 = new ButtonBuilder()
            .setCustomId('ticdelete')
            .setEmoji('üîí')
            .setLabel('–ó–∞–∫—Ä–∏—Ç–∏ –±—ñ–ª–µ—Ç')
            .setStyle(ButtonStyle.Secondary);
            let emb = new EmbedBuilder()
            .setColor("Yellow")
            .setTitle('–ë—ñ–ª–µ—Ç–∏')
            .setDescription(`–£—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –±—ñ–ª–µ—Ç. –ù–∞–ø–∏—à–∏, —â–æ —Ç–∏ —Ö–æ—á–µ—à –¥–æ–ø–æ–≤—ñ—Å—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó.\n**–Ø–∫—â–æ —Ç–∏ –∑–∞—Ö–æ—á–µ—à –∑–∞–∫—Ä–∏—Ç–∏ –±—ñ–ª–µ—Ç, —Ç–æ –Ω–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É** `);
            let row = new ActionRowBuilder()
            .addComponents(button1);
            await interaction.guild.channels.create(
                {
                name:`–±—ñ–ª–µ—Ç-–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞-${interaction.user.id}`,
                type: ChannelType.GuildText,
                parent: interaction.user,
                permissionOverwrites: [
                    {
                        id: interaction.guild.roles.everyone,        
                        deny: [PermissionsBitField.Flags.ViewChannel]                               
                    },
                    {
                        id: interaction.user.id,
                        allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages, PermissionsBitField.Flags.ReadMessageHistory]
                    }
                ]
            }).then(channel => channel.send({
                embeds:[emb],
                components:[row]
            }))
        
            await interaction.reply({content: `–£—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –±—ñ–ª–µ—Ç! –ü–µ—Ä–µ–≤—ñ—Ä –∫–∞–Ω–∞–ª–∏ —Å–µ—Ä–≤–µ—Ä—É, –≤—ñ–Ω –¥–µ—Å—å —Ç–∞–º. :)`,
            ephemeral: true
            })
            
            
    
           
            
    
          
            let emb2 = new EmbedBuilder()
            .setTitle('**–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è**')
            .setDescription('**–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–∫—Ä–∏–≤ –±—ñ–ª–µ—Ç!**')
            .addFields(
            {name:'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:', value:`<@${interaction.user.id}>`, inline:true},
            {name:'–ë—ñ–ª–µ—Ç –º–æ–∂—É—Ç—å –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏: ', value:`**–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏**`, inline:true},
            {name:'–ë—ñ–ª–µ—Ç –±—É–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π: ', value:`<t:${Math.floor(Date. now() / 1000)}>`, inline:true}
            )
            .setColor('Yellow'); 
            sendLog(interaction,emb2)
        }else if(interaction.customId === "ticdelete") { 
            let yes = new ButtonBuilder()
            .setCustomId('ticclose')
            .setEmoji('üëç')
            .setLabel('–¢–∞–∫')
            .setStyle(ButtonStyle.Success);
            let no = new ButtonBuilder()
            .setCustomId('ticclose2')
            .setEmoji('üëé')
            .setLabel('–ù—ñ')
            .setStyle(ButtonStyle.Danger);
            let row1 = new ActionRowBuilder()
            .addComponents(yes)
            .addComponents(no);
            interaction.reply({
                embeds:[new EmbedBuilder().setColor("Yellow").setTitle(`–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è`).setDescription(`–¢–∏ —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à –∑–∞–∫—Ä–∏—Ç–∏ –±—ñ–ª–µ—Ç?`)],
                components:[row1],
                ephemeral:true
            })
        }else if(interaction.customId === "ticclose"){
            let emb3 = new EmbedBuilder()
            .setTitle('**–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è**')
            .setDescription('**–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–∫—Ä–∏–≤ –±—ñ–ª–µ—Ç!**')
            .addFields({name:'–ë—ñ–ª–µ—Ç –∑–∞–∫—Ä–∏–≤:', value:`<@${interaction.user.id}>`, inline:true})
            .setTimestamp()
            .setColor('Yellow'); 
            sendLog(interaction,emb3)
            interaction.channel.delete()
            
        }else if(interaction.customId === "ticclose2") {
          interaction.reply({content:'–ì–∞—Ä–∞–∑–¥, —è –Ω–µ –∑–∞–∫—Ä–∏–≤ –±—ñ–ª–µ—Ç',ephemeral:true})
        }
    })
    }
}